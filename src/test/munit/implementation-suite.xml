<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="implementation-suite.xml" />
	<munit:test name="getCabs-success-test" doc:id="8dd0ef35-ef42-4047-a387-d3b14c05a1b4" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock getCabData" doc:id="e33feb1a-e194-45c0-912e-4b3f7d8be7ba" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="1ccaaa38-8144-42d7-8c33-306d9844ec23" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://getCabssuccesstest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getCabssuccesstest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="7d646c5f-5d53-4f88-b2ad-0fbfc8a704a8" >
				<munit:payload value="#[readUrl('classpath://getCabssuccesstest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getCabssuccesstest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getCabssuccesstest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getCabs" doc:id="984a05dd-8385-47d4-ba5a-ef3b324e781e" name="getCabs"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="2cb22790-2092-42eb-8a1b-a96376d54d64" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getCabssuccesstest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="postCabs-success-test" doc:id="f6a623ec-3d4b-4caf-8df7-b4f1da3e2a87" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Insert" doc:id="b756b895-7d0b-4229-851d-9329590baff4" processor="db:insert">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="99d3cd71-8202-48e7-8002-c144b34dda09" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://postCabssuccesstest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://postCabssuccesstest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Set Payload" doc:id="57825477-9d38-4263-96d6-0877b725dc7c" processor="set-payload">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="fa066a41-68ba-4db2-982c-d68039948656" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[readUrl('classpath://postCabssuccesstest\mock_payload1.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="9f20d985-f706-4efb-b476-7779ca6d3f89" >
				<munit:payload value="#[output application/json --- readUrl('classpath://postCabssuccesstest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://postCabssuccesstest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postCabssuccesstest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to postCabs" doc:id="43b7ee9e-1843-4763-8d34-5f483c53d535" name="postCabs"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="2776e09a-bff0-4f56-be36-21318981f439" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import postCabssuccesstest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="postCabs-success-test1" doc:id="4aedd555-6a34-4391-aeda-f50eada4ac50" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="3e67aed8-6707-4227-8b5c-89694e3db21e" >
				<munit:payload value="#[output application/json --- readUrl('classpath://postCabssuccesstest1\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://postCabssuccesstest1\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postCabssuccesstest1\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to postCabs" doc:id="3eb6db8e-f7ed-43fe-91b0-4e27da307aa0" name="postCabs"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="9004ba6f-735e-4e78-b368-5f5dcf871c93" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import postCabssuccesstest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="postCabs-success-test2" doc:id="70761af9-2f0b-40d0-b6c5-d4a1e6e4972c" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="5cc392ea-fb01-47e6-907f-9cec35ac0471" >
				<munit:payload value="#[output application/json --- readUrl('classpath://postCabssuccesstest2\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://postCabssuccesstest2\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postCabssuccesstest2\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to postCabs" doc:id="1d2da544-b664-410a-b51f-e686d8350249" name="postCabs"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="37eb0c1f-6048-4d95-936f-a543d64ed129" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import postCabssuccesstest2::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
